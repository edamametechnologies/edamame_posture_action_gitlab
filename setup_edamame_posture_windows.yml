.setup_edamame_posture_windows:
  stage: setup
  before_script:
    # Step 1: Install Git if not already installed (Windows Only)
    - |
      if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
        Write-Output "Git not found. Installing Git..."

        # Define Git installer URL (update version as needed)
        $gitInstallerUrl = "https://github.com/git-for-windows/git/releases/download/v2.40.0.windows.1/Git-2.40.0-64-bit.exe"
        $installerPath = "$env:TEMP\git-installer.exe"

        # Download Git installer
        Invoke-WebRequest -Uri $gitInstallerUrl -OutFile $installerPath

        # Install Git silently
        Start-Process -FilePath $installerPath -Args "/VERYSILENT /NORESTART" -Wait

        # Remove installer after installation
        Remove-Item $installerPath -Force

        Write-Output "Git installation completed."
      } else {
        Write-Output "Git is already installed."
      }

    # Step 2: Verify Git installation
    - git --version

    # Step 3: Define Git Bash path (Windows Only)
    - |
      $gitBashPath = "C:\Program Files\Git\bin\bash.exe"
      if (Test-Path $gitBashPath) {
        Write-Output "Git Bash found at $gitBashPath."
      } else {
        Write-Output "Git Bash not found at $gitBashPath."
        exit 1
      }

    # Step 4: Create a Bash script with all your commands
    - |
      $bashScriptContent = @'
      #!/bin/bash
      set -e  # Exit immediately if a command exits with a non-zero status

      echo "Determining the Runner's OS based on tags..."
      if [[ "$CI_RUNNER_TAGS" =~ macos ]]; then
        export CI_RUNNER_OS="macos"
      elif [[ "$CI_RUNNER_TAGS" =~ linux ]]; then
        export CI_RUNNER_OS="linux"
      elif [[ "$CI_RUNNER_TAGS" =~ windows ]]; then
        export CI_RUNNER_OS="windows"
      else
        echo "Unable to determine Runner's OS from tags."
        export CI_RUNNER_OS="unknown"
      fi
      echo "Detected Runner OS: $CI_RUNNER_OS"

      # Rest of your Bash script goes here
      '@

      # Save the Bash script to a temporary file
      $bashScriptPath = "$env:TEMP\setup_edamame_posture.sh"
      Set-Content -Path $bashScriptPath -Value $bashScriptContent -Encoding UTF8

    # Step 5: Execute the Bash script using Git Bash
    - |
      & "$gitBashPath" -c "bash $env:TEMP/setup_edamame_posture.sh"

  variables:
    AUTO_REMEDIATE: "false"
    SKIP_REMEDIATIONS: "false"
    NETWORK_SCAN: "false"
    DUMP_SESSIONS_LOG: "false"
    CHECKOUT: "false"
    CHECKOUT_SUBMODULES: "false"
    DISPLAY_LOGS: "true"
    WHITELIST: "github"
    WHITELIST_CONFORMANCE: "false"
# .setup_edamame_posture_windows:
#   stage: setup
#   before_script:
#     # Step 1: Install Git if not already installed (Windows Only)
#     - |
#       if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
#         Write-Output "Git not found. Installing Git..."

#         # Define Git installer URL (update version as needed)
#         $gitInstallerUrl = "https://github.com/git-for-windows/git/releases/download/v2.40.0.windows.1/Git-2.40.0-64-bit.exe"
#         $installerPath = "$env:TEMP\git-installer.exe"

#         # Download Git installer
#         Invoke-WebRequest -Uri $gitInstallerUrl -OutFile $installerPath

#         # Install Git silently
#         Start-Process -FilePath $installerPath -Args "/VERYSILENT /NORESTART" -Wait

#         # Remove installer after installation
#         Remove-Item $installerPath -Force

#         Write-Output "Git installation completed."
#       } else {
#         Write-Output "Git is already installed."
#       }

#     # Step 2: Verify Git installation
#     - git --version

#     # Step 3: Define Git Bash path (Windows Only)
#     - |
#       $gitBashPath = "C:\Program Files\Git\bin\bash.exe"
#       if (Test-Path $gitBashPath) {
#         Write-Output "Git Bash found at $gitBashPath."
#       } else {
#         Write-Output "Git Bash not found at $gitBashPath."
#         exit 1
#       }

#     # Step 4: Create a Bash script with all your commands
#     - |
#       $bashScriptContent = @"
#       #!/bin/bash
#       set -e  # Exit immediately if a command exits with a non-zero status

#       echo "Determining the Runner's OS based on tags..."
#       if [[ "$CI_RUNNER_TAGS" =~ macos ]]; then
#         export CI_RUNNER_OS="macos"
#       elif [[ "$CI_RUNNER_TAGS" =~ linux ]]; then
#         export CI_RUNNER_OS="linux"
#       elif [[ "$CI_RUNNER_TAGS" =~ windows ]]; then
#         export CI_RUNNER_OS="windows"
#       else
#         echo "Unable to determine Runner's OS from tags."
#         export CI_RUNNER_OS="unknown"
#       fi
#       echo "Detected Runner OS: $CI_RUNNER_OS"

#       # Conditional setup based on OS
#       if [[ "$CI_RUNNER_OS" == "linux" ]]; then
#         echo "Setting up environment for Linux..."

#         # Update package lists and install necessary packages
#         sudo apt-get update && sudo apt-get install -y git libpcap0.8 wget

#         # Create a custom sudo script and update PATH
#         mkdir -p ~/bin
#         echo -e '#!/bin/bash\n"$@"' > ~/bin/sudo
#         chmod +x ~/bin/sudo
#         echo 'export PATH="$HOME/bin:$PATH"' | tee -a ~/.bashrc ~/.profile >/dev/null
#         export PATH="$HOME/bin:$PATH"

#         echo "Linux environment setup complete."
#       elif [[ "$CI_RUNNER_OS" == "windows" || "$CI_RUNNER_OS" == "macos" ]]; then
#         echo "No additional setup required for $CI_RUNNER_OS."
#       else
#         echo "Unsupported OS: $CI_RUNNER_OS. Exiting..."
#         exit 1
#       fi

#       # Download EDAMAME Posture binary based on OS
#       echo "Downloading EDAMAME Posture binary based on OS..."
#       echo "OS: $CI_RUNNER_OS"
#       case "$CI_RUNNER_OS" in
#         "linux")
#           if [[ ! -f edamame_posture ]]; then
#             wget https://edamame-posture.s3.eu-west-1.amazonaws.com/linux/latest/edamame_posture
#             chmod +x edamame_posture
#           fi
#           ;;
#         "macos")
#           if [[ ! -f edamame_posture ]]; then
#             wget https://edamame-posture.s3.eu-west-1.amazonaws.com/macos/latest/edamame_posture
#             chmod +x edamame_posture
#           fi
#           ;;
#         "windows")
#           if [[ ! -f edamame_posture.exe ]]; then
#             wget https://edamame-posture.s3.eu-west-1.amazonaws.com/windows/latest/edamame_posture.exe
#           fi
#           ;;
#         *)
#           echo "Unsupported OS: $CI_RUNNER_OS"
#           exit 1
#           ;;
#       esac

#       # Show initial posture
#       echo "Showing initial posture..."
#       if [[ "$CI_RUNNER_OS" == "windows" ]]; then
#         ./edamame_posture.exe score
#       else
#         sudo ./edamame_posture score
#       fi

#       # Auto-remediate posture issues if requested
#       echo "Auto-remediating posture issues if requested..."
#       if [[ "$AUTO_REMEDIATE" == "true" ]]; then
#         if [[ -z "$SKIP_REMEDIATIONS" ]]; then
#           echo "No remediations to skip."
#           if [[ "$CI_RUNNER_OS" == "windows" ]]; then
#             ./edamame_posture.exe remediate
#           else
#             sudo ./edamame_posture remediate
#           fi
#         else
#           echo "Skipping remediations: $SKIP_REMEDIATIONS"
#           if [[ "$CI_RUNNER_OS" == "windows" ]]; then
#             ./edamame_posture.exe remediate "$SKIP_REMEDIATIONS"
#           else
#             sudo ./edamame_posture remediate "$SKIP_REMEDIATIONS"
#           fi
#         fi
#       fi

#       # Start EDAMAME Posture process and wait for connection
#       echo "Starting EDAMAME Posture process and waiting for connection..."
#       if [[ -n "$EDAMAME_USER" && -n "$EDAMAME_DOMAIN" && -n "$EDAMAME_PIN" && -n "$EDAMAME_ID" ]]; then
#         if [[ "$CI_RUNNER_OS" == "windows" ]]; then
#           if [[ -n "$WHITELIST" ]]; then
#             ./edamame_posture.exe start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_windows"
#           else
#             ./edamame_posture.exe start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
#           fi
#           ./edamame_posture.exe wait-for-connection
#         else
#           if [[ "$CI_RUNNER_OS" == "macos" ]]; then
#             if [[ -n "$WHITELIST" ]]; then
#               sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_macos"
#             else
#               sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
#             fi
#             sudo ./edamame_posture wait-for-connection
#           elif [[ "$CI_RUNNER_OS" == "linux" ]]; then
#             if [[ -n "$WHITELIST" ]]; then
#               sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_ubuntu"
#             else
#               sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
#             fi
#             sudo ./edamame_posture wait-for-connection
#           fi
#         fi
#       else
#         if [[ -n "$EDAMAME_USER$EDAMAME_DOMAIN$EDAMAME_PIN$EDAMAME_ID" ]]; then
#           echo "Please provide all required arguments: EDAMAME_USER, EDAMAME_DOMAIN, EDAMAME_PIN, EDAMAME_ID"
#           exit 1
#         fi
#       fi

#       # Checkout the repo through the git CLI if requested
#       echo 'Checkout the repo through the git CLI if requested'
#       attempts=0
#       timeout=true

#       for i in {1..20}; do
#         attempts=$((attempts + 1))
#         echo "Attempt $attempts: Checking out the repo through the Git CLI..."
#         if git init && \
#            git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git && \
#            git fetch --depth=1 origin "$CI_COMMIT_REF_NAME"; then
#           if git checkout -b "$CI_COMMIT_REF_NAME" FETCH_HEAD; then
#             timeout=false
#             break
#           fi
#         else
#           echo "Checkout failed. Waiting for 60 seconds before retrying..."
#           sleep 60
#           rm -rf .git
#         fi
#       done

#       elapsed_time=$((attempts * 60))
#       elapsed_minutes=$((elapsed_time / 60))
#       elapsed_seconds=$((elapsed_time % 60))

#       if [ "$timeout" = true ]; then
#         echo "Timeout occurred while attempting to clone the repository."
#         echo "Total time: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
#         exit 1
#       else
#         echo "Repository cloned successfully."
#         echo "Time taken: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
#         echo "Checked out branch: $(git rev-parse --abbrev-ref HEAD)"
#         echo "Checked out commit: $(git rev-parse HEAD)"
#         if [ "$(git rev-parse HEAD)" != "$CI_COMMIT_SHA" ]; then
#           echo "Warning: The checked out commit does not match the expected SHA."
#           echo "Expected: $CI_COMMIT_SHA"
#           echo "Actual: $(git rev-parse HEAD)"
#         fi
#       fi

#       # Display logs if enabled
#       echo "Checking if display_logs is enabled..."
#       if [[ "$DISPLAY_LOGS" == "true" ]]; then
#         if [[ "$CI_RUNNER_OS" == "windows" ]]; then
#           ./edamame_posture.exe logs
#         else
#           sudo ./edamame_posture logs
#         fi
#       fi

#       # Dump sessions log if enabled
#       echo "Checking if dump_sessions_log is enabled..."
#       if [[ "$DUMP_SESSIONS_LOG" == "true" ]]; then
#         if [[ "$CI_RUNNER_OS" == "windows" ]]; then
#           echo "Dumping sessions log is not supported on Windows."
#         else
#           sudo ./edamame_posture get-sessions || if [[ "$WHITELIST_CONFORMANCE" == "true" ]]; then exit 1; fi
#         fi
#       fi
#       "@

#       # Save the Bash script to a temporary file
#       $bashScriptPath = "$env:TEMP\setup_edamame_posture.sh"
#       Set-Content -Path $bashScriptPath -Value $bashScriptContent -Encoding UTF8

#     # Step 5: Execute the Bash script using Git Bash (Windows) or directly (Linux/macOS)
#     - |
#       if [[ "$CI_RUNNER_OS" == "windows" ]]; then
#         & "$gitBashPath" -c "bash $env:TEMP/setup_edamame_posture.sh"
#       else
#         # For Linux and macOS, execute the script directly
#         chmod +x $env:TEMP/setup_edamame_posture.sh
#         bash $env:TEMP/setup_edamame_posture.sh
#       fi

#   variables:
#     AUTO_REMEDIATE: "false"
#     SKIP_REMEDIATIONS: "false"
#     NETWORK_SCAN: "false"
#     DUMP_SESSIONS_LOG: "false"
#     CHECKOUT: "false"
#     CHECKOUT_SUBMODULES: "false"
#     DISPLAY_LOGS: "true"
#     WHITELIST: "github"
#     WHITELIST_CONFORMANCE: "false"
