variables:
  AUTO_REMEDIATE: "false"
  SKIP_REMEDIATIONS: "false"
  NETWORK_SCAN: "false"
  DUMP_SESSIONS_LOG: "false"
  CHECKOUT: "false"
  CHECKOUT_SUBMODULES: "false"
  DISPLAY_LOGS: "true"
  WHITELIST: "github"
  WHITELIST_CONFORMANCE: "false"
  WAIT: "false"

.setup_edamame_posture:
  execute:
    - |
      echo "Determining the Runner's OS and package manager..."
      echo "OS release information:"
      cat /etc/os-release

      # Default to unknown
      export CI_RUNNER_OS="unknown"
      export PACKAGE_MANAGER="unknown"

      # Determine the Runner's OS using /etc/os-release
      if grep -qi "ubuntu" /etc/os-release; then
        CI_RUNNER_OS="linux"
        PACKAGE_MANAGER="apt-get"
      elif grep -qi "alpine" /etc/os-release; then
        CI_RUNNER_OS="linux"
        PACKAGE_MANAGER="apk"
      elif grep -qi "centos\|rhel" /etc/os-release; then
        CI_RUNNER_OS="linux"
        PACKAGE_MANAGER="yum"
      else
        echo "Unable to determine Runner's OS from /etc/os-release."
        exit 1
      fi

      echo "Detected Runner OS: $CI_RUNNER_OS"
      echo "Detected Package Manager: $PACKAGE_MANAGER"

    - |
      if [[ "$CI_RUNNER_OS" == "linux" ]]; then
        echo "Setting up environment for Linux..."
        # Install necessary packages based on the package manager
        if [[ "$PACKAGE_MANAGER" == "apt-get" ]]; then
          echo "Using apt-get"
          apt-get update && apt-get install -y git libpcap0.8 wget
        elif [[ "$PACKAGE_MANAGER" == "yum" ]]; then
          echo "Using yum"
          yum install -y git libpcap wget
        elif [[ "$PACKAGE_MANAGER" == "dnf" ]]; then
          echo "Using dnf"
          dnf install -y git libpcap wget
        elif [[ "$PACKAGE_MANAGER" == "apk" ]]; then
          echo "Using apk"
          apk update && apk add git libpcap wget sudo dbus
          dbus-uuidgen --ensure
        else
          echo "Unsupported package manager: $PACKAGE_MANAGER"
          exit 1
        fi

        # Create a custom sudo script and update PATH
        mkdir -p ~/bin
        echo -e '#!/bin/bash\n"$@"' > ~/bin/sudo
        chmod +x ~/bin/sudo
        echo 'export PATH="$HOME/bin:$PATH"' | tee -a ~/.bashrc ~/.profile >/dev/null
        export PATH="$HOME/bin:$PATH"

        echo "Linux environment setup complete."
      elif [[ "$CI_RUNNER_OS" == "macos" ]]; then
        echo "No additional setup required for $CI_RUNNER_OS."
      else
        echo "Unsupported OS: $CI_RUNNER_OS. Exiting..."
        exit 1
      fi

    - |
      cd
      export BINARY_PRESENT=false
      echo "Downloading EDAMAME Posture binary based on OS..."
      echo "OS: $CI_RUNNER_OS"
      case "$CI_RUNNER_OS" in
        "linux")
          if [[ ! -f edamame_posture || ! -f /usr/bin/edamame_posture ]]; then
            # Linux logic
            ARCH=$(uname -m)
            if [[ -f /etc/os-release ]]; then
              source /etc/os-release
            else
              echo "/etc/os-release not found. Cannot determine distribution."
              exit 1
            fi
            case "$ID" in
              "alpine")
                # Alpine Linux
                if [[ "$ARCH" == "x86_64" ]]; then
                  echo "Downloading Alpine Linux binary..."
                  wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-x86_64-unknown-linux-musl
                  mv edamame_posture-0.8.0-x86_64-unknown-linux-musl edamame_posture
                else
                  echo "Downloading Alpine Linux ARM binary..."
                  wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-aarch64-unknown-linux-musl
                  mv edamame_posture-0.8.0-aarch64-unknown-linux-musl edamame_posture
                fi
                ;;
              *)
                # Everything else (Amazon, Ubuntu, Debian, or any unknown distro)
                if [[ "$ARCH" == "x86_64" ]]; then
                  echo "Downloading Gnu Linux binary..."
                  wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-x86_64-unknown-linux-gnu
                  mv edamame_posture-0.8.0-x86_64-unknown-linux-gnu edamame_posture
                elif [[ "$ARCH" == "i686" ]]; then
                  echo "Downloading Gnu Linux i686 binary..."
                  wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-i686-unknown-linux-gnu
                  mv edamame_posture-0.8.0-i686-unknown-linux-gnu edamame_posture
                elif [[ "$ARCH" == "aarch64" ]]; then
                  echo "Downloading Gnu Linux ARM binary..."
                  wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-aarch64-unknown-linux-gnu
                  mv edamame_posture-0.8.0-aarch64-unknown-linux-gnu edamame_posture
                elif [[ "$ARCH" == "armhf" ]]; then
                  echo "Downloading Gnu Linux ARM binary..."
                  wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-armv7-unknown-linux-gnueabihf
                  mv edamame_posture-0.8.0-armv7-unknown-linux-gnueabihf edamame_posture
                else
                  echo "Unsupported architecture: $ARCH"
                  exit 1
                fi
            esac
            chmod +x edamame_posture
          else 
            BINARY_PRESENT=true
          fi
          ;;
        "macos")
          if [[ ! -f edamame_posture || ! -f /usr/bin/edamame_posture ]]; then
            wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-universal-apple-darwin
            mv edamame_posture-0.8.0-universal-apple-darwin edamame_posture
            chmod +x edamame_posture
          else
            BINARY_PRESENT=true
          fi
          ;;
        *)
          echo "Unsupported OS: $CI_RUNNER_OS"
          exit 1
          ;;
      esac

    - |
      if command -v edamame_posture >/dev/null 2>&1; then
        echo "EDAMAME_POSTURE=edamame_posture" >> $GITHUB_ENV
      else
        echo "EDAMAME_POSTURE=./edamame_posture" >> $GITHUB_ENV
      fi

    - |
      echo "Showing initial posture..."
      cd
      sudo $EDAMAME_POSTURE score

    - |
      cd
      echo "Auto-remediating posture issues if requested..."
      if [[ "$AUTO_REMEDIATE" == "true" ]]; then
        if [[ "$SKIP_REMEDIATIONS" == "" ]]; then
          echo "No remediations to skip."
          sudo ./edamame_posture remediate
        else
          echo "Skipping remediations: $SKIP_REMEDIATIONS"
          sudo ./edamame_posture remediate "$SKIP_REMEDIATIONS"
        fi
      fi

    - |
      if [[ "$WAIT" == "true" ]]; then
        sleep 180
      fi

    - |
      echo "Starting EDAMAME Posture process and waiting for connection..."
      cd
      # Check if all arguments are provided
      if [[ -n "$EDAMAME_USER" && -n "$EDAMAME_DOMAIN" && -n "$EDAMAME_PIN" && -n "$EDAMAME_ID" ]]; then
        if [[ "$BINARY_PRESENT" == "true" ]]; then
          # Function to compare strings case-insensitively
          case_insensitive_compare() {
            [[ "${1,,}" == "${2,,}" ]]
          }
          echo "EDAMAME Posture binary is already present. Checking status..."
          sudo ./edamame_posture status > posture_status.txt
          # Check if the output indicates Error getting connection status: transport error
          if grep -q "Error getting connection status: transport error" posture_status.txt; then
            echo "No background process is running. Proceeding to start the process."
          else
            # Extract User and Domain from the status
            current_user=$(grep -i 'user:' posture_status.txt | awk -F': ' '{print $2}')
            current_domain=$(grep -i 'domain:' posture_status.txt | awk -F': ' '{print $2}')
            connected=$(grep -i 'connected:' posture_status.txt | awk -F': ' '{print $2}')

            echo "Current User: $current_user"
            echo "Current Domain: $current_domain"
            echo "Connected: $connected"

            # Compare with inputs
            if [[ "$connected" == "true" ]] && case_insensitive_compare "$current_user" "${{ inputs.edamame_user }}" && case_insensitive_compare "$current_domain" "${{ inputs.edamame_domain }}"; then
              echo "EDAMAME Posture is already running with the specified user and domain. Skipping start process."
              # Exit the step successfully to proceed to the next step
              exit 0
            else
              echo "EDAMAME Posture is not running with the specified user/domain or not connected."
              sudo ./edamame_posture stop
              sleep 5
              echo "Stopped the existing EDAMAME Posture process."
            fi
          fi
        fi
        if [[ "$CI_RUNNER_OS" == "linux" ]]; then
          if [[ -n "$WHITELIST" ]]; then
            sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_ubuntu"
          else
            sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
          fi
          echo "Waiting for connection..."
          sudo ./edamame_posture wait-for-connection
          sleep 80
        else 
          if [[ "$CI_RUNNER_OS" == "macos" ]]; then
            if [[ -n "$WHITELIST" ]]; then
              sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_macos"
            else
              sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
            fi
            echo "Waiting for connection..."
            sudo ./edamame_posture wait-for-connection
            sleep 80
          fi
        fi
      else
        # Check if only a partial set of mandatory arguments is provided
        if [[ -n "$EDAMAME_USER$EDAMAME_DOMAIN$EDAMAME_PIN$EDAMAME_ID" ]]; then
          echo "Please provide all required arguments: EDAMAME_USER, EDAMAME_DOMAIN, EDAMAME_PIN, EDAMAME_ID"
          exit 1
        fi
      fi

    - |
      echo 'Checkout the repo through the git CLI if requested'
      if [[ "$CHECKOUT" == "true" ]]; then
        cd "$CI_PROJECT_DIR"
        attempts=0
        timeout=true

        git init || true
        git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git
        for i in {1..20}; do
          attempts=$((attempts + 1))
          echo "Attempt $attempts: Checking out the repo through the Git CLI..."
          if git fetch --depth=1 origin "$CI_COMMIT_REF_NAME"; then
            if git checkout -b "$CI_COMMIT_REF_NAME" FETCH_HEAD; then
              if [[ "$CHECKOUT_SUBMODULES" == "true" ]]; then
                git submodule update --init --recursive
              fi
              timeout=false
              break
            fi
          else
            echo "Checkout failed. Waiting for 60 seconds before retrying..."
            sleep 60
          fi
        done

        elapsed_time=$((attempts * 60))
        elapsed_minutes=$((elapsed_time / 60))
        elapsed_seconds=$((elapsed_time % 60))

        if [ "$timeout" = true ]; then
          echo "Timeout occurred while attempting to clone the repository."
          echo "Total time: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          exit 1
        else
          echo "Repository cloned successfully."
          echo "Time taken: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          echo "Checked out branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "Checked out commit: $(git rev-parse HEAD)"
          if [ "$(git rev-parse HEAD)" != "$CI_COMMIT_SHA" ]; then
            echo "Warning: The checked out commit does not match the expected SHA."
            echo "Expected: $CI_COMMIT_SHA"
            echo "Actual: $(git rev-parse HEAD)"
          fi
        fi
      fi

    - |
      cd
      echo "Checking if display_logs is enabled..."
      if [[ "$DISPLAY_LOGS" == "true" ]]; then
        sudo ./edamame_posture logs
      fi

    - |
      cd
      echo "Checking if dump_sessions_log is enabled..."
      if [[ "$DUMP_SESSIONS_LOG" == "true" ]]; then
        sudo ./edamame_posture get-sessions || if [[ "$WHITELIST_CONFORMANCE" == "true" ]]; then exit 1; fi
      fi

.setup_edamame_posture_windows:
  stage: setup
  before_script:
    # Step 1: Check for bash.exe (Git Bash) and Install Git if Not Found
    - |
      # Try to find bash.exe using Get-Command
      $bashCommand = Get-Command bash.exe -ErrorAction SilentlyContinue
      if ($bashCommand) {
        $gitBashPath = $bashCommand.Source
        Write-Output "Git Bash found at $gitBashPath."
      } else {
        # If bash.exe not found, proceed to install Git with Git Bash
        Write-Output "Git Bash not found. Installing Git with Git Bash..."
        
        # Define Git installer URL (update version as needed)
        $gitInstallerUrl = "https://github.com/git-for-windows/git/releases/download/v2.42.0.windows.1/Git-2.42.0-64-bit.exe"
        $installerPath = "$env:TEMP\git-installer.exe"
        
        # Download Git installer
        Invoke-WebRequest -Uri $gitInstallerUrl -OutFile $installerPath
        
        # Install Git silently with Git Bash component and add to PATH
        Start-Process -FilePath $installerPath -Args "/VERYSILENT /NORESTART /COMPONENTS=""icons,ext\reg\shellhere,ext\reg\contextmenu,gitlfs,assoc,assoc_sh"" /TASKS=""!desktopicon,add_path"" /DIR=""C:\Program Files\Git""" -Wait
        
        # Remove installer after installation
        Remove-Item $installerPath -Force
        
        Write-Output "Git installation completed."
        
        # Update PATH environment variable
        $env:PATH = "C:\Program Files\Git\cmd;C:\Program Files\Git\usr\bin;" + $env:PATH
        
        # Verify Git Bash installation
        $bashCommand = Get-Command bash.exe -ErrorAction SilentlyContinue
        if ($bashCommand) {
          $gitBashPath = $bashCommand.Source
          Write-Output "Git Bash found at $gitBashPath."
        } else {
          Write-Output "Failed to install Git Bash."
          exit 1
        }
      }

    # Step 2: Update PATH and Verify Git installation
    - |
      # Ensure the new Git is in the PATH
      $env:PATH = "C:\Program Files\Git\cmd;C:\Program Files\Git\usr\bin;" + $env:PATH
      git --version

    # Step 3: Execute the Bash script using Git Bash
    - |
      $bashScriptContent = @'
      #!/bin/bash
      set -e  # Exit immediately if a command exits with a non-zero status

      wget https://github.com/edamametechnologies/edamame_posture_cli/releases/download/v0.8.0/edamame_posture-0.8.0-x86_64-pc-windows-msvc.exe
      mv edamame_posture-0.8.0-x86_64-pc-windows-msvc.exe edamame_posture.exe
      # Show initial posture
      echo "Showing initial posture..."
      ./edamame_posture.exe score

      # Auto-remediate posture issues if requested
      echo "Auto-remediating posture issues if requested..."
      if [[ "$AUTO_REMEDIATE" == "true" ]]; then
        if [[ -z "$SKIP_REMEDIATIONS" ]]; then
          echo "No remediations to skip."
          ./edamame_posture.exe remediate
        else
          echo "Skipping remediations: $SKIP_REMEDIATIONS"
          ./edamame_posture.exe remediate "$SKIP_REMEDIATIONS"
        fi
      fi

      # Start EDAMAME Posture process and wait for connection
      echo "Starting EDAMAME Posture process and waiting for connection..."
      if [[ -n "$EDAMAME_USER" && -n "$EDAMAME_DOMAIN" && -n "$EDAMAME_PIN" && -n "$EDAMAME_ID" ]]; then
        if [[ -n "$WHITELIST" ]]; then
          ./edamame_posture.exe start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_windows"
        else
          ./edamame_posture.exe start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
        fi
        ./edamame_posture.exe wait-for-connection
      else
        if [[ -n "$EDAMAME_USER$EDAMAME_DOMAIN$EDAMAME_PIN$EDAMAME_ID" ]]; then
          echo "Please provide all required arguments: EDAMAME_USER, EDAMAME_DOMAIN, EDAMAME_PIN, EDAMAME_ID"
          exit 1
        fi
      fi

      # Checkout the repo through the git CLI if requested
      echo 'Checkout the repo through the git CLI if requested'
      attempts=0
      timeout=true

      for i in {1..20}; do
        attempts=$((attempts + 1))
        echo "Attempt $attempts: Checking out the repo through the Git CLI..."
        if git init && \
           git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git && \
           git fetch --depth=1 origin "$CI_COMMIT_REF_NAME"; then
          if git checkout -b "$CI_COMMIT_REF_NAME" FETCH_HEAD; then
            timeout=false
            break
          fi
        else
          echo "Checkout failed. Waiting for 60 seconds before retrying..."
          sleep 60
          rm -rf .git
        fi
      done

      elapsed_time=$((attempts * 60))
      elapsed_minutes=$((elapsed_time / 60))
      elapsed_seconds=$((elapsed_time % 60))

      if [ "$timeout" = true ]; then
        echo "Timeout occurred while attempting to clone the repository."
        echo "Total time: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
        exit 1
      else
        echo "Repository cloned successfully."
        echo "Time taken: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
        echo "Checked out branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "Checked out commit: $(git rev-parse HEAD)"
        if [ "$(git rev-parse HEAD)" != "$CI_COMMIT_SHA" ]; then
          echo "Warning: The checked out commit does not match the expected SHA."
          echo "Expected: $CI_COMMIT_SHA"
          echo "Actual: $(git rev-parse HEAD)"
        fi
      fi

      # Display logs if enabled
      echo "Checking if display_logs is enabled..."
      if [[ "$DISPLAY_LOGS" == "true" ]]; then
        ./edamame_posture.exe logs
      fi

      # Dump sessions log if enabled
      echo "Checking if dump_sessions_log is enabled..."
      if [[ "$DUMP_SESSIONS_LOG" == "true" ]]; then
        echo "Dumping sessions log is not supported on Windows."
      fi
      '@

      # Save the Bash script to a temporary file without BOM
      $bashScriptPath = "$env:TEMP\setup_edamame_posture.sh"
      Set-Content -Path $bashScriptPath -Value $bashScriptContent -Encoding Ascii

      # Function to convert Windows path to Unix path
      function ConvertTo-UnixPath($winPath) {
          # Replace backslashes with forward slashes
          $unixPath = $winPath -replace '\\', '/'
          # Extract drive letter
          if ($unixPath -match '^([A-Za-z]):(.*)') {
              $driveLetter = $matches[1].ToLower()
              $pathAfterDrive = $matches[2]
              # Prepend /driveletter to the path
              $unixPath = "/$driveLetter$pathAfterDrive"
          }
          return $unixPath
      }

      # Convert the Windows path to Unix path
      $unixBashScriptPath = ConvertTo-UnixPath $bashScriptPath
      Write-Output "Unix-style script path: $unixBashScriptPath"

    # Step 4: Execute the Bash script using Git Bash
    - |
      & "$gitBashPath" -c "bash $unixBashScriptPath"

  variables:
    AUTO_REMEDIATE: "false"
    SKIP_REMEDIATIONS: "false"
    NETWORK_SCAN: "false"
    DUMP_SESSIONS_LOG: "false"
    CHECKOUT: "false"
    CHECKOUT_SUBMODULES: "false"
    DISPLAY_LOGS: "true"
    WHITELIST: "github"
    WHITELIST_CONFORMANCE: "false"
