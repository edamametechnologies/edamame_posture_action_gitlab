.setup_edamame_posture:
  stage: setup
  script:
    - |
      echo "Determining the Runner's OS based on tags..."
      if [[ "$CI_RUNNER_TAGS" =~ macos ]]; then
        export CI_RUNNER_OS="macos"
      elif [[ "$CI_RUNNER_TAGS" =~ linux ]]; then
        export CI_RUNNER_OS="linux"
      elif [[ "$CI_RUNNER_TAGS" =~ windows ]]; then
        export CI_RUNNER_OS="windows"
      else
        echo "Unable to determine Runner's OS from tags."
        export CI_RUNNER_OS="unknown"
      fi
      echo "Detected Runner OS: $CI_RUNNER_OS"
      # Conditional commands based on detected OS
    - |
      if [[ "$CI_RUNNER_OS" == "linux" ]]; then
        echo "Setting up environment for Linux..."

        # Update package lists and install necessary packages
        apt-get update && apt-get install -y git libpcap0.8 wget

        # Create a custom sudo script and update PATH
        mkdir -p ~/bin
        echo -e '#!/bin/bash\n"$@"' > ~/bin/sudo
        chmod +x ~/bin/sudo
        echo 'export PATH="$HOME/bin:$PATH"' | tee -a ~/.bashrc ~/.profile >/dev/null
        export PATH="$HOME/bin:$PATH"

        echo "Linux environment setup complete."
      elif [[ "$CI_RUNNER_OS" == "windows" || "$CI_RUNNER_OS" == "macos" ]]; then
        echo "No additional setup required for $CI_RUNNER_OS."

      else
        echo "Unsupported OS: $CI_RUNNER_OS. Exiting..."
        exit 1
      fi

    - |
      echo "Downloading EDAMAME Posture binary based on OS..."
      echo "OS: $CI_RUNNER_OS"
      case "$CI_RUNNER_OS" in
        "linux")
          if [[ ! -f edamame_posture ]]; then
            wget https://edamame-posture.s3.eu-west-1.amazonaws.com/linux/latest/edamame_posture
            chmod +x edamame_posture
          fi
          ;;
        "macos")
          if [[ ! -f edamame_posture ]]; then
            wget https://edamame-posture.s3.eu-west-1.amazonaws.com/macos/latest/edamame_posture
            chmod +x edamame_posture
          fi
          ;;
        "windows")
          if [[ ! -f edamame_posture.exe ]]; then
            wget https://edamame-posture.s3.eu-west-1.amazonaws.com/windows/latest/edamame_posture.exe
          fi
          ;;
        *)
          echo "Unsupported OS: $CI_RUNNER_OS"
          exit 1
          ;;
      esac

    - |
      echo "Showing initial posture..."
      sudo ./edamame_posture score

    - |
      echo "Auto-remediating posture issues if requested..."
      if [[ "$AUTO_REMEDIATE" == "true" ]]; then
        if [[ -z "$SKIP_REMEDIATIONS" ]]; then
          echo "No remediations to skip."
          sudo ./edamame_posture remediate
        else
          echo "Skipping remediations: $SKIP_REMEDIATIONS"
          sudo ./edamame_posture remediate "$SKIP_REMEDIATIONS"
        fi
      fi
    #TODO ADD SLEEP IF REQUESTED
    - |
      echo "Starting EDAMAME Posture process and waiting for connection..."
      # Check if all arguments are provided
      if [[ -n "$EDAMAME_USER" && -n "$EDAMAME_DOMAIN" && -n "$EDAMAME_PIN" && -n "$EDAMAME_ID" ]]; then
        if [[ -n "$WHITELIST" ]]; then
          EDAMAME_LOG_LEVEL=debug sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_ubuntu"
        else
          sudo ./edamame_posture start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
        fi
        echo "Waiting for connection..."
        sudo ./edamame_posture wait-for-connection
        echo "Showing posture after connection..."
        cat ~/.edamame_posture.yaml
        echo "Showing status..."
        sudo ./edamame_posture status
        echo "Sleeping for 80 seconds..."
        sleep 80
      else
        # Check if only a partial set of mandatory arguments is provided
        if [[ -n "$EDAMAME_USER$EDAMAME_DOMAIN$EDAMAME_PIN$EDAMAME_ID" ]]; then
          echo "Please provide all required arguments: EDAMAME_USER, EDAMAME_DOMAIN, EDAMAME_PIN, EDAMAME_ID"
          exit 1
        fi
      fi

    - |
      echo 'Checkout the repo through the git CLI if requested'
      attempts=0
      timeout=true

      for i in {1..20}; do
        attempts=$((attempts + 1))
        echo "Attempt $attempts: Checking out the repo through the Git CLI..."
        if git init && \
           git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git && \
           git fetch --depth=1 origin "$CI_COMMIT_REF_NAME"; then
          if git checkout -b "$CI_COMMIT_REF_NAME" FETCH_HEAD; then
            timeout=false
            break
          fi
        else
          echo "Checkout failed. Waiting for 60 seconds before retrying..."
          sleep 60
          rm -rf .git
        fi
      done

      elapsed_time=$((attempts * 60))
      elapsed_minutes=$((elapsed_time / 60))
      elapsed_seconds=$((elapsed_time % 60))

      if [ "$timeout" = true ]; then
        echo "Timeout occurred while attempting to clone the repository."
        echo "Total time: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
        exit 1
      else
        echo "Repository cloned successfully."
        echo "Time taken: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
        echo "Checked out branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "Checked out commit: $(git rev-parse HEAD)"
        if [ "$(git rev-parse HEAD)" != "$CI_COMMIT_SHA" ]; then
          echo "Warning: The checked out commit does not match the expected SHA."
          echo "Expected: $CI_COMMIT_SHA"
          echo "Actual: $(git rev-parse HEAD)"
        fi
      fi

    - |
      echo "Checking if display_logs is enabled..."
      if [[ "$DISPLAY_LOGS" == "true" ]]; then
        sudo ./edamame_posture logs
      fi

    - |
      echo "Checking if dump_sessions_log is enabled..."
      if [[ "$DUMP_SESSIONS_LOG" == "true" ]]; then
        sudo ./edamame_posture get-sessions || if [[ "$WHITELIST_CONFORMANCE" == "true" ]]; then exit 1; fi
      fi

  variables:
    AUTO_REMEDIATE: "false"
    SKIP_REMEDIATIONS: "false"
    NETWORK_SCAN: "false"
    DUMP_SESSIONS_LOG: "false"
    CHECKOUT: "false"
    CHECKOUT_SUBMODULES: "false"
    DISPLAY_LOGS: "true"
    WHITELIST: "github"
    WHITELIST_CONFORMANCE: "false"

.setup_edamame_posture_windows:
  stage: setup
  before_script:
    # Step 1: Check for bash.exe (Git Bash) and Install Git if Not Found
    - |
      # Try to find bash.exe using Get-Command
      $bashCommand = Get-Command bash.exe -ErrorAction SilentlyContinue
      if ($bashCommand) {
        $gitBashPath = $bashCommand.Source
        Write-Output "Git Bash found at $gitBashPath."
      } else {
        # If bash.exe not found, proceed to install Git with Git Bash
        Write-Output "Git Bash not found. Installing Git with Git Bash..."
        
        # Define Git installer URL (update version as needed)
        $gitInstallerUrl = "https://github.com/git-for-windows/git/releases/download/v2.42.0.windows.1/Git-2.42.0-64-bit.exe"
        $installerPath = "$env:TEMP\git-installer.exe"
        
        # Download Git installer
        Invoke-WebRequest -Uri $gitInstallerUrl -OutFile $installerPath
        
        # Install Git silently with Git Bash component and add to PATH
        Start-Process -FilePath $installerPath -Args "/VERYSILENT /NORESTART /COMPONENTS=""icons,ext\reg\shellhere,ext\reg\contextmenu,gitlfs,assoc,assoc_sh"" /TASKS=""!desktopicon,add_path"" /DIR=""C:\Program Files\Git""" -Wait
        
        # Remove installer after installation
        Remove-Item $installerPath -Force
        
        Write-Output "Git installation completed."
        
        # Update PATH environment variable
        $env:PATH = "C:\Program Files\Git\cmd;C:\Program Files\Git\usr\bin;" + $env:PATH
        
        # Verify Git Bash installation
        $bashCommand = Get-Command bash.exe -ErrorAction SilentlyContinue
        if ($bashCommand) {
          $gitBashPath = $bashCommand.Source
          Write-Output "Git Bash found at $gitBashPath."
        } else {
          Write-Output "Failed to install Git Bash."
          exit 1
        }
      }

    # Step 2: Update PATH and Verify Git installation
    - |
      # Ensure the new Git is in the PATH
      $env:PATH = "C:\Program Files\Git\cmd;C:\Program Files\Git\usr\bin;" + $env:PATH
      git --version

    # Step 3: Create a Bash script with all your commands
    - |
      $bashScriptContent = @'
      #!/bin/bash
      set -e  # Exit immediately if a command exits with a non-zero status

      wget https://edamame-posture.s3.eu-west-1.amazonaws.com/windows/latest/edamame_posture.exe
      # Show initial posture
      echo "Showing initial posture..."
      ./edamame_posture.exe score

      # Auto-remediate posture issues if requested
      echo "Auto-remediating posture issues if requested..."
      if [[ "$AUTO_REMEDIATE" == "true" ]]; then
        if [[ -z "$SKIP_REMEDIATIONS" ]]; then
          echo "No remediations to skip."
          ./edamame_posture.exe remediate
        else
          echo "Skipping remediations: $SKIP_REMEDIATIONS"
          ./edamame_posture.exe remediate "$SKIP_REMEDIATIONS"
        fi
      fi

      # Start EDAMAME Posture process and wait for connection
      echo "Starting EDAMAME Posture process and waiting for connection..."
      if [[ -n "$EDAMAME_USER" && -n "$EDAMAME_DOMAIN" && -n "$EDAMAME_PIN" && -n "$EDAMAME_ID" ]]; then
        if [[ -n "$WHITELIST" ]]; then
          ./edamame_posture.exe start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN" "${WHITELIST}_windows"
        else
          ./edamame_posture.exe start "$EDAMAME_USER" "$EDAMAME_DOMAIN" "$EDAMAME_PIN" "$EDAMAME_ID" "$NETWORK_SCAN"
        fi
        ./edamame_posture.exe wait-for-connection
      else
        if [[ -n "$EDAMAME_USER$EDAMAME_DOMAIN$EDAMAME_PIN$EDAMAME_ID" ]]; then
          echo "Please provide all required arguments: EDAMAME_USER, EDAMAME_DOMAIN, EDAMAME_PIN, EDAMAME_ID"
          exit 1
        fi
      fi

      # Checkout the repo through the git CLI if requested
      echo 'Checkout the repo through the git CLI if requested'
      attempts=0
      timeout=true

      for i in {1..20}; do
        attempts=$((attempts + 1))
        echo "Attempt $attempts: Checking out the repo through the Git CLI..."
        if git init && \
           git remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git && \
           git fetch --depth=1 origin "$CI_COMMIT_REF_NAME"; then
          if git checkout -b "$CI_COMMIT_REF_NAME" FETCH_HEAD; then
            timeout=false
            break
          fi
        else
          echo "Checkout failed. Waiting for 60 seconds before retrying..."
          sleep 60
          rm -rf .git
        fi
      done

      elapsed_time=$((attempts * 60))
      elapsed_minutes=$((elapsed_time / 60))
      elapsed_seconds=$((elapsed_time % 60))

      if [ "$timeout" = true ]; then
        echo "Timeout occurred while attempting to clone the repository."
        echo "Total time: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
        exit 1
      else
        echo "Repository cloned successfully."
        echo "Time taken: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
        echo "Checked out branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "Checked out commit: $(git rev-parse HEAD)"
        if [ "$(git rev-parse HEAD)" != "$CI_COMMIT_SHA" ]; then
          echo "Warning: The checked out commit does not match the expected SHA."
          echo "Expected: $CI_COMMIT_SHA"
          echo "Actual: $(git rev-parse HEAD)"
        fi
      fi

      # Display logs if enabled
      echo "Checking if display_logs is enabled..."
      if [[ "$DISPLAY_LOGS" == "true" ]]; then
        ./edamame_posture.exe logs
      fi

      # Dump sessions log if enabled
      echo "Checking if dump_sessions_log is enabled..."
      if [[ "$DUMP_SESSIONS_LOG" == "true" ]]; then
        echo "Dumping sessions log is not supported on Windows."
      fi
      '@

      # Save the Bash script to a temporary file without BOM
      $bashScriptPath = "$env:TEMP\setup_edamame_posture.sh"
      Set-Content -Path $bashScriptPath -Value $bashScriptContent -Encoding Ascii

      # Function to convert Windows path to Unix path
      function ConvertTo-UnixPath($winPath) {
          # Replace backslashes with forward slashes
          $unixPath = $winPath -replace '\\', '/'
          # Extract drive letter
          if ($unixPath -match '^([A-Za-z]):(.*)') {
              $driveLetter = $matches[1].ToLower()
              $pathAfterDrive = $matches[2]
              # Prepend /driveletter to the path
              $unixPath = "/$driveLetter$pathAfterDrive"
          }
          return $unixPath
      }

      # Convert the Windows path to Unix path
      $unixBashScriptPath = ConvertTo-UnixPath $bashScriptPath
      Write-Output "Unix-style script path: $unixBashScriptPath"

    # Step 4: Execute the Bash script using Git Bash
    - |
      & "$gitBashPath" -c "bash $unixBashScriptPath"

  variables:
    AUTO_REMEDIATE: "false"
    SKIP_REMEDIATIONS: "false"
    NETWORK_SCAN: "false"
    DUMP_SESSIONS_LOG: "false"
    CHECKOUT: "false"
    CHECKOUT_SUBMODULES: "false"
    DISPLAY_LOGS: "true"
    WHITELIST: "github"
    WHITELIST_CONFORMANCE: "false"
