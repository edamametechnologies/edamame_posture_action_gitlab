# templates/setup_edamame_posture_bash.yml

.setup_edamame_posture_bash:
  stage: setup
  script:
    - |
      echo "Determining the Runner's OS based on tags..."
      if [[ "$CI_RUNNER_TAGS" =~ macos ]]; then
        export CI_RUNNER_OS="macos"
      elif [[ "$CI_RUNNER_TAGS" =~ linux ]]; then
        export CI_RUNNER_OS="linux"
      else
        echo "Unable to determine Runner's OS from tags."
        export CI_RUNNER_OS="unknown"
      fi
      echo "Detected Runner OS: $CI_RUNNER_OS"

      # Conditional commands based on detected OS
    - |
      if [[ "$CI_RUNNER_OS" == "linux" ]]; then
        echo "Setting up environment for Linux..."
        
        # Update package lists and install necessary packages
        apt-get update && apt-get install -y git libpcap0.8 wget
        
        # Create a custom sudo script and update PATH
        mkdir -p ~/bin
        echo -e '#!/bin/bash\n"$@"' > ~/bin/sudo
        chmod +x ~/bin/sudo
        echo 'export PATH="$HOME/bin:$PATH"' | tee -a ~/.bashrc ~/.profile >/dev/null
        export PATH="$HOME/bin:$PATH"
        
        echo "Linux environment setup complete."
      elif [[ "$CI_RUNNER_OS" == "macos" ]]; then
        echo "No additional setup required for macOS."
      else
        echo "Unsupported OS: $CI_RUNNER_OS. Exiting..."
        exit 1
      fi

    - |
      echo "Downloading EDAMAME Posture binary based on OS..."
      echo "OS: $CI_RUNNER_OS"
      case "$CI_RUNNER_OS" in
        "linux")
          if [[ ! -f edamame_posture ]]; then
            wget https://edamame-posture.s3.eu-west-1.amazonaws.com/linux/latest/edamame_posture
            chmod +x edamame_posture
          fi
          ;;
        "macos")
          if [[ ! -f edamame_posture ]]; then
            wget https://edamame-posture.s3.eu-west-1.amazonaws.com/macos/latest/edamame_posture
            chmod +x edamame_posture
          fi
          ;;
      esac

    - |
      echo "Showing initial posture..."
      if [[ "$CI_RUNNER_OS" == "windows" ]]; then
        ./edamame_posture.exe score
      else
        sudo ./edamame_posture score
      fi

    - |
      echo "Auto-remediating posture issues if requested..."
      if [[ "$AUTO_REMEDIATE" == "true" ]]; then
        if [[ -z "$SKIP_REMEDIATIONS" ]]; then
          echo "No remediations to skip."
          if [[ "$CI_RUNNER_OS" == "windows" ]]; then
            ./edamame_posture.exe remediate
          else
            sudo ./edamame_posture remediate
          fi
        else
          echo "Skipping remediations: $SKIP_REMEDIATIONS"
          if [[ "$CI_RUNNER_OS" == "windows" ]]; then
            ./edamame_posture.exe remediate "$SKIP_REMEDIATIONS"
          else
            sudo ./edamame_posture remediate "$SKIP_REMEDIATIONS"
          fi
        fi
      fi

    # Add other Bash-specific setup steps as needed

# templates/setup_edamame_posture_powershell.yml

.setup_edamame_posture_powershell:
  stage: setup
  tags:
    - windows
  script:
    - |
      # PowerShell Script Begins

      Write-Host "=============================="
      Write-Host "Determining the Runner's OS based on tags..."
      Write-Host "=============================="

      # Determine Runner OS
      if ($env:CI_RUNNER_TAGS -match "windows") {
          $env:CI_RUNNER_OS = "windows"
      }
      else {
          Write-Host "Unable to determine Runner's OS from tags."
          $env:CI_RUNNER_OS = "unknown"
      }
      Write-Host "Detected Runner OS: $env:CI_RUNNER_OS"

      # Exit if OS is unknown
      if ($env:CI_RUNNER_OS -eq "unknown") {
          Write-Error "Unsupported OS: $env:CI_RUNNER_OS. Exiting..."
          exit 1
      }

      Write-Host "=============================="
      Write-Host "Ensuring Chocolatey is installed..."
      Write-Host "=============================="

      # Check if Chocolatey is installed
      if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Write-Host "Chocolatey not found. Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              Write-Error "Chocolatey installation failed. Exiting..."
              exit 1
          }
          Write-Host "Chocolatey installed successfully."
      }
      else {
          Write-Host "Chocolatey is already installed."
      }

      Write-Host "=============================="
      Write-Host "Installing wget and curl via Chocolatey if not already installed..."
      Write-Host "=============================="

      # Install wget if not installed
      if (-not (choco list --local-only | Select-String '^wget$')) {
          Write-Host "Installing wget..."
          choco install wget -y
          if (-not (Get-Command wget -ErrorAction SilentlyContinue)) {
              Write-Error "wget installation failed. Exiting..."
              exit 1
          }
          Write-Host "wget installed successfully."
      }
      else {
          Write-Host "wget is already installed."
      }

      # Install curl if not installed
      if (-not (choco list --local-only | Select-String '^curl$')) {
          Write-Host "Installing curl..."
          choco install curl -y
          if (-not (Get-Command curl -ErrorAction SilentlyContinue)) {
              Write-Error "curl installation failed. Exiting..."
              exit 1
          }
          Write-Host "curl installed successfully."
      }
      else {
          Write-Host "curl is already installed."
      }

      Write-Host "=============================="
      Write-Host "Setting up environment for Windows..."
      Write-Host "=============================="

      # Create a bin directory if it doesn't exist
      $binPath = "$env:USERPROFILE\bin"
      if (-not (Test-Path -Path $binPath)) {
          Write-Host "Creating bin directory at $binPath"
          New-Item -ItemType Directory -Path $binPath | Out-Null
      }
      else {
          Write-Host "bin directory already exists at $binPath"
      }

      # Add bin directory to PATH if not already present
      if (-not ($env:PATH -like "*$binPath*")) {
          Write-Host "Adding $binPath to PATH"
          [System.Environment]::SetEnvironmentVariable("PATH", "$binPath;$env:PATH", [System.EnvironmentVariableTarget]::User)
          $env:PATH = "$binPath;$env:PATH"
          Write-Host "PATH updated successfully."
      }
      else {
          Write-Host "PATH already includes $binPath"
      }

      Write-Host "=============================="
      Write-Host "Downloading EDAMAME Posture binary for Windows..."
      Write-Host "=============================="

      # Define the binary name and download URL
      $edamameExe = "edamame_posture.exe"
      $edamameUrl = "https://edamame-posture.s3.eu-west-1.amazonaws.com/windows/latest/edamame_posture.exe"

      # Download the binary if it doesn't exist
      if (-not (Test-Path -Path $edamameExe)) {
          Write-Host "Downloading $edamameExe from $edamameUrl..."
          try {
              Invoke-WebRequest -Uri $edamameUrl -OutFile $edamameExe -UseBasicParsing
              Write-Host "$edamameExe downloaded successfully."
          }
          catch {
              Write-Error "Failed to download $edamameExe. Exiting..."
              exit 1
          }
      }
      else {
          Write-Host "$edamameExe already exists."
      }

      Write-Host "=============================="
      Write-Host "Showing initial posture..."
      Write-Host "=============================="

      # Run the initial posture score
      try {
          .\$edamameExe score
          Write-Host "Initial posture score completed successfully."
      }
      catch {
          Write-Error "Failed to execute posture score. Exiting..."
          exit 1
      }

      Write-Host "=============================="
      Write-Host "Auto-remediating posture issues if requested..."
      Write-Host "=============================="

      # Auto-remediation
      if ($env:AUTO_REMEDIATE -eq "true") {
          if ($env:SKIP_REMEDIATIONS -eq "false") {
              Write-Host "No remediations to skip."
              try {
                  .\$edamameExe remediate
                  Write-Host "Auto-remediation completed successfully."
              }
              catch {
                  Write-Error "Auto-remediation failed. Exiting..."
                  exit 1
              }
          }
          else {
              Write-Host "Skipping remediations: $env:SKIP_REMEDIATIONS"
              try {
                  .\$edamameExe remediate "$env:SKIP_REMEDIATIONS"
                  Write-Host "Selective auto-remediation completed successfully."
              }
              catch {
                  Write-Error "Selective auto-remediation failed. Exiting..."
                  exit 1
              }
          }
      }
      else {
          Write-Host "AUTO_REMEDIATE is set to false. Skipping remediation."
      }

      Write-Host "=============================="
      Write-Host "Starting EDAMAME Posture process and waiting for connection..."
      Write-Host "=============================="

      # Start the EDAMAME Posture process
      if ($env:EDAMAME_USER -and $env:EDAMAME_DOMAIN -and $env:EDAMAME_PIN -and $env:EDAMAME_ID) {
          $startCommand = ".\$edamameExe start `"$env:EDAMAME_USER`" `"$env:EDAMAME_DOMAIN`" `"$env:EDAMAME_PIN`" `"$env:EDAMAME_ID`" `"$env:NETWORK_SCAN`""
          
          if ($env:WHITELIST) {
              $startCommand += " `"$env:WHITELIST_windows`""
          }

          Write-Host "Executing: $startCommand"
          try {
              Invoke-Expression $startCommand
              Write-Host "EDAMAME Posture started successfully."
          }
          catch {
              Write-Error "Failed to start EDAMAME Posture. Exiting..."
              exit 1
          }

          # Wait for connection
          try {
              .\$edamameExe wait-for-connection
              Write-Host "Connection established successfully."
          }
          catch {
              Write-Error "Failed to establish connection. Exiting..."
              exit 1
          }
      }
      else {
          # Check for partial arguments
          if ($env:EDAMAME_USER -or $env:EDAMAME_DOMAIN -or $env:EDAMAME_PIN -or $env:EDAMAME_ID) {
              Write-Error "Please provide all required arguments: EDAMAME_USER, EDAMAME_DOMAIN, EDAMAME_PIN, EDAMAME_ID. Exiting..."
              exit 1
          }
          else {
              Write-Host "No EDAMAME arguments provided. Skipping start and wait steps."
          }
      }

      Write-Host "=============================="
      Write-Host "Checking out the repository through Git CLI if requested..."
      Write-Host "=============================="

      # Repository Checkout with Retries
      $attempts = 0
      $maxAttempts = 20
      $timeout = $true

      for ($i = 1; $i -le $maxAttempts; $i++) {
          $attempts++
          Write-Host "Attempt $attempts: Checking out the repository through Git CLI..."

          try {
              git init
              git remote add origin "https://gitlab-ci-token:$env:CI_JOB_TOKEN@gitlab.com/$env:CI_PROJECT_PATH.git"
              git fetch --depth=1 origin "$env:CI_COMMIT_REF_NAME"
              git checkout -b "$env:CI_COMMIT_REF_NAME" FETCH_HEAD
              
              # Verify checkout
              $currentCommit = git rev-parse HEAD
              if ($currentCommit -eq $env:CI_COMMIT_SHA) {
                  Write-Host "Repository cloned and checked out successfully."
                  $timeout = $false
                  break
              }
              else {
                  Write-Warning "Checked out commit ($currentCommit) does not match expected SHA ($env:CI_COMMIT_SHA)."
              }
          }
          catch {
              Write-Warning "Checkout attempt $attempts failed. Retrying in 60 seconds..."
              Start-Sleep -Seconds 60
              Remove-Item -Recurse -Force .git
          }
      }

      # Calculate elapsed time
      $elapsed_time = $attempts * 60
      $elapsed_minutes = [math]::Floor($elapsed_time / 60)
      $elapsed_seconds = $elapsed_time % 60

      if ($timeout) {
          Write-Error "Timeout occurred while attempting to clone the repository."
          Write-Error "Total time: ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          exit 1
      }
      else {
          Write-Host "Repository cloned successfully in ${elapsed_minutes} minutes and ${elapsed_seconds} seconds."
          Write-Host "Checked out branch: $(git rev-parse --abbrev-ref HEAD)"
          Write-Host "Checked out commit: $(git rev-parse HEAD)"
      }

      Write-Host "=============================="
      Write-Host "Checking if display_logs is enabled..."
      Write-Host "=============================="

      # Display Logs
      if ($env:DISPLAY_LOGS -eq "true") {
          try {
              .\$edamameExe logs
              Write-Host "Displayed logs successfully."
          }
          catch {
              Write-Warning "Failed to display logs."
          }
      }
      else {
          Write-Host "DISPLAY_LOGS is set to false. Skipping log display."
      }

      Write-Host "=============================="
      Write-Host "Checking if dump_sessions_log is enabled..."
      Write-Host "=============================="

      # Dump Sessions Log
      if ($env:DUMP_SESSIONS_LOG -eq "true") {
          Write-Host "Dumping sessions log is not supported on Windows."
          # If supported, uncomment and modify the following lines:
          # try {
          #     .\$edamameExe get-sessions
          #     Write-Host "Sessions log dumped successfully."
          # }
          # catch {
          #     if ($env:WHITELIST_CONFORMANCE -eq "true") {
          #         Write-Error "Failed to dump sessions log with WHITELIST_CONFORMANCE=true. Exiting..."
          #         exit 1
          #     }
          #     else {
          #         Write-Warning "Failed to dump sessions log."
          #     }
          # }
      }
      else {
          Write-Host "DUMP_SESSIONS_LOG is set to false. Skipping sessions log dump."
      }

      Write-Host "=============================="
      Write-Host "Windows setup for EDAMAME Posture completed successfully."
      Write-Host "=============================="

      # PowerShell Script Ends

  variables:
    AUTO_REMEDIATE: "false" # Set to "true" to enable auto-remediation
    SKIP_REMEDIATIONS: "false" # Specify remediations to skip if any
    NETWORK_SCAN: "false" # Set to "true" to enable network scanning
    DUMP_SESSIONS_LOG: "false" # Set to "true" to dump sessions log (if supported)
    DISPLAY_LOGS: "true" # Set to "true" to display logs
    WHITELIST: "github" # Specify whitelist (e.g., "github")
    WHITELIST_CONFORMANCE: "false" # Set to "true" to enforce whitelist conformance
    CHECKOUT: "false"
    CHECKOUT_SUBMODULES: "false"
